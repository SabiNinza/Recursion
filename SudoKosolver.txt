#include <iostream>
#include<cmath>
using namespace std;
bool canPlace(int mat[][100],int i,int j,int n,int no){
    //row and col
    for(int x=0;x<n;x++){
        if(mat[i][x]==no||mat[x][j]==no){
            return false;
        }
    }
    //for grid
    int rn=sqrt(n);
    int sx=(i/rn)*rn;
    int sy=(j/rn)*rn;
    for(int p=sx;p<sx+rn;p++){
        for(int q=sy;q<sy+rn;q++){
            if(mat[p][q]==no){
                return false;
            }
        }
    }
    return true;
}
bool sudukoSolver(int mat[][100],int i,int j,int n){
    if(i==n) {
        //print
        for(int p=0;p<n;p++){
            for(int q=0;q<n;q++){
                cout<<mat[p][q]<<" ";
            }
            cout<<endl;
        }
        return true;
    }
    if(j==n) return sudukoSolver(mat,i+1,0,n);
    if(mat[i][j]!=0) return sudukoSolver(mat,i,j+1,n);
    for(int no=1;no<=9;no++){
        if(canPlace(mat,i,j,n,no)){
            mat[i][j]=no;
            bool couldwesolve=sudukoSolver(mat,i,j+1,n);
            if(couldwesolve) return true;
        }
    }
    //baccktrack
    mat[i][j]=0;
    return false;
}
int main() {
     int n;
     cin>>n;
     int mat[100][100];
     for(int i=0;i<n;i++){
         for(int j=0;j<n;j++){
             cin>>mat[i][j];
         }
     }
    bool ans= sudukoSolver(mat,0,0,n);
}
